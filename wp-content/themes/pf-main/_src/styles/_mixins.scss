@function responsive_sizing($from: 100, $to: 200) {
  @return calc(#{$from+"px"} + (#{$to} - #{$from}) * (100vw - 350px) / (1700 - 350));
}

@mixin responsive_text($from: 12, $to: 18) {
  font-size: responsive_sizing($from, $to);
}

//Vertically centers a div inside the parent. Parent must have position: relative
@mixin v-align() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  -ms-transform:translateY(-50%); /* IE */
  -moz-transform:translateY(-50%); /* Firefox */
  -webkit-transform:translateY(-50%); /* Safari and Chrome */
  -o-transform:translateY(-50%);
}

//BEM is life
$elementSeparator: '__';
$modifierSeparator: '--';

@function selectorToString($selector) {
  $selector: inspect($selector); //cast to string
  $selector: str-slice($selector, 2, -2); //remove brackets
  @return $selector;
}

@function containsModifier($selector) {
  $selector: selectorToString($selector);
  @if str-index($selector, $modifierSeparator) {
    @return true;
  } @else {
    @return false;
  }
}

@function getBlock($selector) {
  $selector: selectorToString($selector);
  $modifierStart: str-index($selector, $modifierSeparator) - 1;
  @return str-slice($selector, 0, $modifierStart);
}

@mixin b($block) {
  .#{$block} {
    @content;
  }
}

@mixin e($element) {
  $selector: &;
  @if containsModifier($selector) {
    $block: getBlock($selector);
    @at-root {
      #{$selector} {
        #{$block+$elementSeparator+$element} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$selector+$elementSeparator+$element} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  @at-root {
    #{&}#{$modifierSeparator+$modifier} {
      @content;
    }
  }
}
